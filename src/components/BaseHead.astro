---
import { SEO, type Props as SeoProps } from 'astro-seo';
import { getImage } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import coverImage from '@assets/me.webp';

interface Props {
	title: string;
	description: string;
	article?: CollectionEntry<'articles'>;
	seo?: SeoProps;
}

const { title, description, seo, article } = Astro.props;

const getCoverImage = async () => {
	if (article) {
		return `og/${article.slug}.png`;
	} else {
		const coverImageRendered = await getImage({
			src: coverImage,
			format: 'jpg',
			height: 630,
			width: 1200
		});

		return coverImageRendered.src.slice(1);
	}
};

const coverImageUrl = await getCoverImage();

const image = `${import.meta.env.DEV ? 'http://localhost:4321/' : Astro.site}${coverImageUrl}`;
---

<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link href="https://tech.lgbt/@pseudorizer" rel="me" />
<meta name="generator" content={Astro.generator} />
<link
	rel="alternate"
	type="application/rss+xml"
	title="emilymedhurst.gay"
	href={`${Astro.site}rss.xml`}
/>
<link rel="sitemap" href="/sitemap-index.xml" />
<SEO
	{title}
	{description}
	charset="UTF-8"
	openGraph={{
		basic: { title, type: article ? 'article' : 'website', image },
		optional: { description, siteName: 'emilymedhurst' },
		image: { type: 'image/png', height: 630, width: 1200, alt: title },
		article: {
			publishedTime: article?.data.created.toISOString(),
			tags: article?.data.tags
		}
	}}
	twitter={{
		card: 'summary_large_image',
		site: '@Pseudorizer',
		creator: '@Pseudorizer',
		image,
		imageAlt: title,
		description
	}}
	{...seo}
/>
